// @generated by protobuf-ts 2.9.4 with parameter client_none
// @generated from protobuf file "auth.proto" (package "dvn.service.auth", syntax proto3)
// tslint:disable
import { ServiceType } from "@protobuf-ts/runtime-rpc";
import { WireType } from "@protobuf-ts/runtime";
import type { BinaryWriteOptions } from "@protobuf-ts/runtime";
import type { IBinaryWriter } from "@protobuf-ts/runtime";
import { UnknownFieldHandler } from "@protobuf-ts/runtime";
import type { BinaryReadOptions } from "@protobuf-ts/runtime";
import type { IBinaryReader } from "@protobuf-ts/runtime";
import type { PartialMessage } from "@protobuf-ts/runtime";
import { reflectionMergePartial } from "@protobuf-ts/runtime";
import { MessageType } from "@protobuf-ts/runtime";
/**
 * @generated from protobuf message dvn.service.auth.Empty
 */
export interface Empty {
}
/**
 * @generated from protobuf message dvn.service.auth.HashedPassword
 */
export interface HashedPassword {
    /**
     * @generated from protobuf field: string hash = 1;
     */
    hash: string;
    /**
     * @generated from protobuf field: string salt = 2;
     */
    salt: string;
}
/**
 * @generated from protobuf message dvn.service.auth.AuthUser
 */
export interface AuthUser {
    /**
     * @generated from protobuf field: string id = 1;
     */
    id: string;
    /**
     * @generated from protobuf field: string account = 2;
     */
    account: string;
    /**
     * @generated from protobuf field: string factoryId = 3;
     */
    factoryId: string;
    /**
     * @generated from protobuf field: dvn.service.auth.HashedPassword password = 4;
     */
    password?: HashedPassword;
    /**
     * @generated from protobuf field: int32 accountType = 5;
     */
    accountType: number;
    /**
     * @generated from protobuf field: repeated string permissions = 6;
     */
    permissions: string[];
    /**
     * @generated from protobuf field: string fullname = 7;
     */
    fullname: string;
    /**
     * @generated from protobuf field: string email = 8;
     */
    email: string;
    /**
     * @generated from protobuf field: string phone = 9;
     */
    phone: string;
}
/**
 * @generated from protobuf message dvn.service.auth.ParamsGetUserFromToken
 */
export interface ParamsGetUserFromToken {
    /**
     * @generated from protobuf field: string token = 1;
     */
    token: string;
}
// @generated message type with reflection information, may provide speed optimized methods
class Empty$Type extends MessageType<Empty> {
    constructor() {
        super("dvn.service.auth.Empty", []);
    }
    create(value?: PartialMessage<Empty>): Empty {
        const message = globalThis.Object.create((this.messagePrototype!));
        if (value !== undefined)
            reflectionMergePartial<Empty>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: Empty): Empty {
        return target ?? this.create();
    }
    internalBinaryWrite(message: Empty, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dvn.service.auth.Empty
 */
export const Empty = new Empty$Type();
// @generated message type with reflection information, may provide speed optimized methods
class HashedPassword$Type extends MessageType<HashedPassword> {
    constructor() {
        super("dvn.service.auth.HashedPassword", [
            { no: 1, name: "hash", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "salt", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<HashedPassword>): HashedPassword {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.hash = "";
        message.salt = "";
        if (value !== undefined)
            reflectionMergePartial<HashedPassword>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: HashedPassword): HashedPassword {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string hash */ 1:
                    message.hash = reader.string();
                    break;
                case /* string salt */ 2:
                    message.salt = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: HashedPassword, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string hash = 1; */
        if (message.hash !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.hash);
        /* string salt = 2; */
        if (message.salt !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.salt);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dvn.service.auth.HashedPassword
 */
export const HashedPassword = new HashedPassword$Type();
// @generated message type with reflection information, may provide speed optimized methods
class AuthUser$Type extends MessageType<AuthUser> {
    constructor() {
        super("dvn.service.auth.AuthUser", [
            { no: 1, name: "id", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 2, name: "account", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 3, name: "factoryId", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 4, name: "password", kind: "message", T: () => HashedPassword },
            { no: 5, name: "accountType", kind: "scalar", T: 5 /*ScalarType.INT32*/ },
            { no: 6, name: "permissions", kind: "scalar", repeat: 2 /*RepeatType.UNPACKED*/, T: 9 /*ScalarType.STRING*/ },
            { no: 7, name: "fullname", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 8, name: "email", kind: "scalar", T: 9 /*ScalarType.STRING*/ },
            { no: 9, name: "phone", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<AuthUser>): AuthUser {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.id = "";
        message.account = "";
        message.factoryId = "";
        message.accountType = 0;
        message.permissions = [];
        message.fullname = "";
        message.email = "";
        message.phone = "";
        if (value !== undefined)
            reflectionMergePartial<AuthUser>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: AuthUser): AuthUser {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string id */ 1:
                    message.id = reader.string();
                    break;
                case /* string account */ 2:
                    message.account = reader.string();
                    break;
                case /* string factoryId */ 3:
                    message.factoryId = reader.string();
                    break;
                case /* dvn.service.auth.HashedPassword password */ 4:
                    message.password = HashedPassword.internalBinaryRead(reader, reader.uint32(), options, message.password);
                    break;
                case /* int32 accountType */ 5:
                    message.accountType = reader.int32();
                    break;
                case /* repeated string permissions */ 6:
                    message.permissions.push(reader.string());
                    break;
                case /* string fullname */ 7:
                    message.fullname = reader.string();
                    break;
                case /* string email */ 8:
                    message.email = reader.string();
                    break;
                case /* string phone */ 9:
                    message.phone = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: AuthUser, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string id = 1; */
        if (message.id !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.id);
        /* string account = 2; */
        if (message.account !== "")
            writer.tag(2, WireType.LengthDelimited).string(message.account);
        /* string factoryId = 3; */
        if (message.factoryId !== "")
            writer.tag(3, WireType.LengthDelimited).string(message.factoryId);
        /* dvn.service.auth.HashedPassword password = 4; */
        if (message.password)
            HashedPassword.internalBinaryWrite(message.password, writer.tag(4, WireType.LengthDelimited).fork(), options).join();
        /* int32 accountType = 5; */
        if (message.accountType !== 0)
            writer.tag(5, WireType.Varint).int32(message.accountType);
        /* repeated string permissions = 6; */
        for (let i = 0; i < message.permissions.length; i++)
            writer.tag(6, WireType.LengthDelimited).string(message.permissions[i]);
        /* string fullname = 7; */
        if (message.fullname !== "")
            writer.tag(7, WireType.LengthDelimited).string(message.fullname);
        /* string email = 8; */
        if (message.email !== "")
            writer.tag(8, WireType.LengthDelimited).string(message.email);
        /* string phone = 9; */
        if (message.phone !== "")
            writer.tag(9, WireType.LengthDelimited).string(message.phone);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dvn.service.auth.AuthUser
 */
export const AuthUser = new AuthUser$Type();
// @generated message type with reflection information, may provide speed optimized methods
class ParamsGetUserFromToken$Type extends MessageType<ParamsGetUserFromToken> {
    constructor() {
        super("dvn.service.auth.ParamsGetUserFromToken", [
            { no: 1, name: "token", kind: "scalar", T: 9 /*ScalarType.STRING*/ }
        ]);
    }
    create(value?: PartialMessage<ParamsGetUserFromToken>): ParamsGetUserFromToken {
        const message = globalThis.Object.create((this.messagePrototype!));
        message.token = "";
        if (value !== undefined)
            reflectionMergePartial<ParamsGetUserFromToken>(this, message, value);
        return message;
    }
    internalBinaryRead(reader: IBinaryReader, length: number, options: BinaryReadOptions, target?: ParamsGetUserFromToken): ParamsGetUserFromToken {
        let message = target ?? this.create(), end = reader.pos + length;
        while (reader.pos < end) {
            let [fieldNo, wireType] = reader.tag();
            switch (fieldNo) {
                case /* string token */ 1:
                    message.token = reader.string();
                    break;
                default:
                    let u = options.readUnknownField;
                    if (u === "throw")
                        throw new globalThis.Error(`Unknown field ${fieldNo} (wire type ${wireType}) for ${this.typeName}`);
                    let d = reader.skip(wireType);
                    if (u !== false)
                        (u === true ? UnknownFieldHandler.onRead : u)(this.typeName, message, fieldNo, wireType, d);
            }
        }
        return message;
    }
    internalBinaryWrite(message: ParamsGetUserFromToken, writer: IBinaryWriter, options: BinaryWriteOptions): IBinaryWriter {
        /* string token = 1; */
        if (message.token !== "")
            writer.tag(1, WireType.LengthDelimited).string(message.token);
        let u = options.writeUnknownFields;
        if (u !== false)
            (u == true ? UnknownFieldHandler.onWrite : u)(this.typeName, message, writer);
        return writer;
    }
}
/**
 * @generated MessageType for protobuf message dvn.service.auth.ParamsGetUserFromToken
 */
export const ParamsGetUserFromToken = new ParamsGetUserFromToken$Type();
/**
 * @generated ServiceType for protobuf service dvn.service.auth.AuthService
 */
export const AuthService = new ServiceType("dvn.service.auth.AuthService", [
    { name: "getUserFromToken", options: {}, I: ParamsGetUserFromToken, O: AuthUser }
]);
